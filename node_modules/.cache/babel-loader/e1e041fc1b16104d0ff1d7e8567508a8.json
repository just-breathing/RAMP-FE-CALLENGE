{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transactionIndex = data.transactions.findIndex(currentTransaction => currentTransaction.id === transactionId);\n\n  if (transactionIndex === -1) {\n    return {\n      success: false\n    };\n  }\n\n  const updatedTransaction = { ...data.transactions[transactionIndex],\n    approved: value\n  };\n  const updatedTransactions = [...data.transactions];\n  updatedTransactions[transactionIndex] = updatedTransaction;\n  data.transactions = updatedTransactions;\n  return {\n    sucess: true\n  };\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","transactionIndex","findIndex","currentTransaction","success","updatedTransaction","approved","updatedTransactions","sucess"],"sources":["/Users/sundeeprn/Downloads/ramp-fe-challenge 2/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams) => {\n  const transactionIndex = data.transactions.findIndex(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (transactionIndex === -1) {\n    return {success:false}\n  }\n\n  const updatedTransaction = {\n    ...data.transactions[transactionIndex],\n    approved: value\n  }\n\n  const updatedTransactions = [...data.transactions]\n  updatedTransactions[transactionIndex] = updatedTransaction\n\n  data.transactions = updatedTransactions\n  return {sucess:true}\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAD+C;EAEnEC,YAAY,EAAEJ,QAAQ,CAACI;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAON,IAAI,CAACE,YAAL,CAAkBY,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAA4D;EAAA,IAA3D;IAAEC,aAAF;IAAiBC;EAAjB,CAA2D;EAChG,MAAMC,gBAAgB,GAAGrB,IAAI,CAACE,YAAL,CAAkBoB,SAAlB,CACtBC,kBAAD,IAAwBA,kBAAkB,CAACN,EAAnB,KAA0BE,aAD3B,CAAzB;;EAIA,IAAIE,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;IAC3B,OAAO;MAACG,OAAO,EAAC;IAAT,CAAP;EACD;;EAED,MAAMC,kBAAkB,GAAG,EACzB,GAAGzB,IAAI,CAACE,YAAL,CAAkBmB,gBAAlB,CADsB;IAEzBK,QAAQ,EAAEN;EAFe,CAA3B;EAKA,MAAMO,mBAAmB,GAAG,CAAC,GAAG3B,IAAI,CAACE,YAAT,CAA5B;EACAyB,mBAAmB,CAACN,gBAAD,CAAnB,GAAwCI,kBAAxC;EAEAzB,IAAI,CAACE,YAAL,GAAoByB,mBAApB;EACA,OAAO;IAACC,MAAM,EAAC;EAAR,CAAP;AACD,CAnBM"},"metadata":{},"sourceType":"module"}